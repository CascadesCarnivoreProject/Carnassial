using Carnassial.Util;
using System;
using System.IO;
using System.Windows;

namespace Carnassial.Editor.Dialog
{
    /// <summary>
    /// This dialog displays a list of metadata found in a selected image. 
    /// </summary>
    // Note: There are lots of commonalities between this dialog and DialogPopulate, but its not clear if it's worth the effort of factoring the two.
    public partial class InspectMetadata : Window
    {
        private string imageFilePath;

        public InspectMetadata(string folderPath, Window owner)
        {
            this.InitializeComponent();
            this.Owner = owner;
        }

        // After the interface is loaded, 
        // - Load the Exif data into the data grid
        // - Load the names of the note controls into the listbox
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            Utilities.SetDefaultDialogPosition(this);
            Utilities.TryFitWindowInWorkingArea(this);
        }

        // Label the column headers
        private void Datagrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            this.dataGrid.Columns[0].Header = "Metadata Name";
            this.dataGrid.Columns[1].Header = "Value from current file";
            this.dataGrid.SortByFirstColumnAscending();

            // Select the first row
            if (this.dataGrid.Items.Count > 0)
            { 
                this.dataGrid.SelectedIndex = 0;
                this.dataGrid.Focus();
            }
        }

        private void OkayButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = true;
        }

        private void OpenFile_Click(object sender, RoutedEventArgs e)
        {
            string filter = String.Format("Images and videos (*{0};*{1};*{2})|*{0};*{1};*{2}", Constant.File.JpgFileExtension, Constant.File.AviFileExtension, Constant.File.Mp4FileExtension);
            if (Utilities.TryGetFileFromUser("Select a typical file to inspect", ".", filter, out this.imageFilePath))
            {
                this.ImageName.Content = Path.GetFileName(this.imageFilePath);
                this.dataGrid.ItemsSource = Utilities.LoadMetadata(this.imageFilePath);
            }
        }
    }
}
